---
- name: Copy script to set default kernel
  copy:
    src: "files/sp_set_kernel"
    dest: "/tmp/sp_set_kernel"
    mode: 0755
  when:
    - sp_kernel_version is defined
    - not ansible_kernel | regex_search("^" + sp_kernel_version)

- name: Set default kernel
  command: "/tmp/sp_set_kernel {{ sp_kernel_version }}"
  when:
    - sp_kernel_version is defined
    - not ansible_kernel | regex_search("^" + sp_kernel_version)
    - ansible_distribution != "Ubuntu"

- name: Check kernel cmdline
  command:
    argv:
      - "/usr/lib/storpool/kernel_cmdline_check"
      - "--exit-code"
      - "2"
  ignore_errors: true
  register: kernel_cmdline_check

- name: Reboot to apply kernel parameters
  become: true
  command: reboot
  async: 1
  poll: 0
  when: >
    (
      sp_kernel_version is defined
      and (not ansible_kernel | regex_search("^" + sp_kernel_version))
    )
    or
    kernel_cmdline_check.rc == 2

- name: Waiting for host to get back from reboot
  wait_for_connection:
    connect_timeout: 5
    delay: 15
    sleep: 2
    timeout: 600
  when: >
    (
      sp_kernel_version is defined
      and (not ansible_kernel | regex_search("^" + sp_kernel_version))
    )
    or
    kernel_cmdline_check.rc == 2

- name: Gather facts anew after reboot
  gather_facts:
    parallel: yes
  when:
    - sp_kernel_version is defined
    - not ansible_kernel | regex_search("^" + sp_kernel_version)

- name: Verify we are using the specified kernel
  assert:
    that:
      - ansible_kernel | regex_search("^" + sp_kernel_version)
    success_msg: "Running expected kernel {{ sp_kernel_version }}"
    fail_msg: "Running unexpected kernel {{ ansible_kernel }}"
  when: sp_kernel_version is defined

- name: Verify kernel parameters are applied
  command:
    argv:
      - "/usr/lib/storpool/kernel_cmdline_check"
      - "--exit-code"
      - "2"